#python核心编程
##多线程编程
对python虚拟机的访问由全局解释器锁来控制，正是这个锁能够保证同一时刻只有一个线程在运行。在多线程环境中，python虚拟机按以下方式执行：

2. 1. 设置GIL
2. 切换到一个线程去运行
3. 运行:
    
    + 指定数量的字节码指令，或者
    + 线程主动让出控制
4. 把线程设置为睡眠状态
5. 解锁GIL
6. 再次重复以上所有步骤

主线程应该是一个好的管理者，它要了解每个线程都要做些什么事情，线程都需要什么数据和什么参数，以及在线程结束的时候，他们都提供了什么结果。

thread模块提供了基本的线程和锁的支持，而threading提供了更高级别，功能更强的线程管理的功能，queue模块允许用户创建一个可以用于在多个线程之间共享数据的队列数据结构。

**避免使用thread模块**

+ 首先，更高级别的threading模块更为先进，对线程的支持更为完善。
+ 而且，使用thread模块里的属性有可能会与threading出现冲突。
+ 低级别的thread模块的同步原语很少，而threading模块更多。
+ 使用thread模块，对于你的进程什么时候结束完全没有控制，当主线程结束时，所有的线程会被强制结束掉，没有警告，也不会有正常的清除工作。
+ thread模块不支持守护线程

##threading模块
**守护线程**

守护线程一般是一个等待客户请求的服务器，如果没有客户提出请求，它就在那等着。

